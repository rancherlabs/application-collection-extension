import { ArtifactCreateDTOPackagingFormatEnum, ArtifactDTO, ArtifactListItemReducedDTO } from '../../autogenerated/client/backend'
import semver from 'semver'

export function sortArtifacts(a: ArtifactListItemReducedDTO | ArtifactDTO, b: ArtifactListItemReducedDTO | ArtifactDTO): number {
  const [ versionA, flavorA, revisionA ] = a.packaging_format === ArtifactCreateDTOPackagingFormatEnum.Rpm ? getRPMVersionFlavorRevision(a) : getOCIVersionFlavorRevision(a)
  const [ versionB, flavorB, revisionB ] = b.packaging_format === ArtifactCreateDTOPackagingFormatEnum.Rpm ? getRPMVersionFlavorRevision(b) : getOCIVersionFlavorRevision(b)
  
  let diff = sort(versionA, flavorA, revisionA, versionB, flavorB, revisionB)
  
  if (diff === undefined) {
    console.error(`Cannot compare artifact names ${a.name} and ${b.name}, will return registration date comparison`)
    diff = new Date(a.registered_at).getTime() - new Date(b.registered_at).getTime()
  }
  
  if (diff == 0 && a.architecture && b.architecture) {
    diff =a.architecture.localeCompare(b.architecture)
  }
    
  return diff
}

function getRPMVersionFlavorRevision(rpm: ArtifactListItemReducedDTO): string[] {
  let chunks = rpm.name.split('-')
  const version = rpm.version || chunks[chunks.length - 2]
  const flavor = rpm.flavor || ''
  const revision = rpm.revision

  return [ version, flavor, revision ]
}

function getOCIVersionFlavorRevision(oci: ArtifactListItemReducedDTO): string[] {
  const chunks = oci.name.split(':')[1].split('-')
  const revision = `0.${oci.revision}`
  const flavor = oci.flavor || ''
  const version = oci.version || chunks.slice(0, chunks.indexOf(flavor || revision)).join('-')

  return [ version, flavor, revision ]
}


function sort(versionA: string, flavorA: string, revisionA: string, versionB: string, flavorB: string, revisionB: string): number | undefined {
  let diff: number | undefined = undefined

  diff = compareVersions(versionA, versionB)

  if (diff == 0 && revisionA && revisionB) {
    diff = compareVersions(revisionA, revisionB)
  }

  if (diff == 0) {
    if (flavorA === '' && flavorB !== '') {
      diff = 1
    } else if (flavorB === '' && flavorA !== '') {
      diff = -1
    } else {
      diff = flavorA.localeCompare(flavorB)
    }
  }

  return diff
}

export function compareVersions(a: string, b: string): number {
  if (semver.valid(a) && semver.valid(b)) {
    return semver.compare(a, b)
  } else {
    return rpmCompare(a, b)
  }
}

function rpmCompare(a: string, b: string): number {
  const coordsA = a.split('.')
  const coordsB = b.split('.')

  const diff = coordsA.reduce((res, current, i) => {
    if (res === 0) {
      if (i < coordsB.length) {
        const aAsInt = parseInt(current)
        const bAsInt = parseInt(coordsB[i])

        if (!isNaN(aAsInt) && !isNaN(bAsInt)) {
          return aAsInt - bAsInt
        }
        
        return current.localeCompare(coordsB[i])
      } else {
        return 1
      }
    }

    return res
  }, 0)

  if (diff == 0 && coordsA.length < coordsB.length) {
    return  -1
  }

  return diff
}
