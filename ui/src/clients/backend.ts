import { ApplicationsApi, ArtifactsApi, ComponentsApi, Configuration, ConfigurationApi, ServiceAccountsApi, StatisticsApi, TokensApi, UsersApi } from '../../autogenerated/client/backend'
import axios, { AxiosInstance } from 'axios'
import axiosRetry, { isRetryableError } from 'axios-retry'
import { Buffer } from 'buffer'

function configuration() {
  const configuration = new Configuration()
  configuration.basePath = 'https://api.apps.rancher.io'

  return configuration
}

function instance(auth: string | null): AxiosInstance {
  const instance = axios.create()
  instance.interceptors.request.use((request) => {
    if (auth) {
      request.headers.Authorization = `Basic ${Buffer.from(auth).toString('base64')}`
    }
    return request
  })

  axiosRetry(instance, {
    retries: 1,
    retryCondition: isRetryableError, // network error or a 5xx error
    onRetry: (count, error, requestConfig) => {
      console.error(`Request attempt failed! [attempt=${count}, url=${requestConfig.url}, error=${error}]`)
    }
  })

  return instance
}

export const applicationsClient = (auth: string | null): ApplicationsApi => {
  return new ApplicationsApi(configuration(), undefined, instance(auth))
}

export const artifactsClient = (auth: string | null): ArtifactsApi => {
  return new ArtifactsApi(configuration(), undefined, instance(auth))
}

export const componentsClient = (auth: string | null): ComponentsApi => {
  return new ComponentsApi(configuration(), undefined, instance(auth))
}

export const configurationClient = (auth: string | null): ConfigurationApi => {
  return new ConfigurationApi(configuration(), undefined, instance(auth))
}

export const tokensClient = (auth: string | null): TokensApi => {
  return new TokensApi(configuration(), undefined, instance(auth))
}

export const serviceAccountsClient = (auth: string | null): ServiceAccountsApi => {
  return new ServiceAccountsApi(configuration(), undefined, instance(auth))
}

export const statsClient = (auth: string | null): StatisticsApi => {
  return new StatisticsApi(configuration(), undefined, instance(auth))
}

export const usersClient = (auth: string | null): UsersApi => {
  return new UsersApi(configuration(), undefined, instance(auth))
}
