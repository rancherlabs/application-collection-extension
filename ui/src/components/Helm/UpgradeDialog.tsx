import { Accordion, AccordionDetails, AccordionSummary, Box, Button, IconButton, Skeleton, Stack, TextField, Tooltip, Typography } from '@mui/material'
import { useEffect, useState } from 'react'
import { HelmListItem, upgradeHelmChart } from '../../clients/helm'
import { createDockerDesktopClient } from '@docker/extension-api-client'
import { AddCircleOutline, ContentCopy, ExpandMore, RemoveCircleOutline } from '@mui/icons-material'
import { ArtifactListItemReducedDTO } from '../../../autogenerated/client/backend'
import Modal from '../Modal'
import FilePicker from './FilePicker'

const ddClient = createDockerDesktopClient()

export default function UpgradeDialog({ artifact, workload, open, onSubmit = () => null, onError = () => null, onClose = () => null }: 
{ artifact: ArtifactListItemReducedDTO, workload: HelmListItem, open: boolean, onSubmit?: (result: HelmListItem) => any, onError?: (e: any) => any, onClose?: () => any }) {
  const [ values, setValues ] = useState<{ key: string, value: string }[]>([])
  const [ currentValue, setCurrentValue ] = useState<{ key?: string, value?: string }>()
  const [ error, setError ] = useState<string>()
  const [ state, setState ] = useState<'ready' | 'loading' | 'updating' | 'error'>()

  useEffect(() => {
    if (open && values.length === 0) {
      setState('loading')
      ddClient.extension.vm?.service?.get(`/charts/${artifact.name.split(':')[0]}/${artifact.version}/local-values`)
        .then(result => {
          const localValues: { key: string, value: string }[] = (result as any).values
          if (localValues.length > 0) {
            setValues(localValues)
          } else {
            setValues([ { key: 'global.imagePullSecrets[0].name', value: 'application-collection' } ])
          }
        })
        .catch(err => console.error('Unexpected error fetching chart local deployment values', err))
        .finally(() => setState('ready'))
    }
  }, [open])

  function upgrade() {
    setState('updating')
    upgradeHelmChart(ddClient, workload, values, artifact)
      .then(result => {
        onSubmit(result)
        setState('ready')
      })
      .catch(e => {
        setState('error')
        onError(e)
      })
  }

  if (error) {
    return (
      <Modal
        title='Error'
        subtitle='There was an unexpected error updating the application'
        open={ open }
        onClose={ onClose }>
        <Box sx={ { p: 2, background: 'rgba(125, 125, 125, 0.1)' } }>
          { 
            error.split('\n')
              .filter(line => line)
              .map((line, i) => <Typography key={ `error-line-${i}` } variant='code' component='p'>&gt; { line }</Typography>) 
          }
        </Box>
        <Stack direction='row' justifyContent='space-between' sx={ { mt: 2 } }>
          <Button 
            color='inherit'
            onClick={ () => setError(undefined) }
            sx={ { mt: 1 } }>Go back</Button>
          <Button 
            color='error'
            onClick={ () => {
              setError(undefined)
              onClose()
            } }
            sx={ { mt: 1 } }>Cancel installation</Button>
        </Stack>
      </Modal>
    )
  }

  if (state === 'loading') {
    return (
      <Modal
        title={ `Update ${ workload.name } to ${ artifact.version }` }
        subtitle='Set Helm Chart values manually or through a YAML file'
        open={ open }
        onClose={ onClose }>
        <Skeleton height='244px' variant='rounded' sx={ { mt: 2 } } />
        <Skeleton height='28px' width='300px' variant='rounded' sx={ { mt: 2 } } />
        <Skeleton height='68px' variant='rounded' sx={ { mt: 2 } } />
        <Stack direction='row' alignItems='space-between' sx={ { mt: 2 } }>
          <Skeleton height='33px' width='78px' variant='rounded' sx={ { mt: 1 } } />
          <Skeleton height='33px' width='78px' variant='rounded' sx={ { mt: 1 } } />
        </Stack>
      </Modal>
    )
  }

  return (
    <Modal
      title={ `Update ${ workload.name } to ${ artifact.version }` }
      subtitle='Set Helm Chart values manually or through a YAML file'
      open={ open }
      onClose={ onClose }
      onSubmit={ upgrade }>
      { 
        values.map((v, i) => 
          <Stack key={ `value-${i}` } direction='row' alignItems='center' spacing={ 2 } sx={ { mt: 2 } }>
            <TextField 
              onChange={ (e) => setValues(values.map((v, j) => i == j ? { key: e.target.value, value: v.value } : v)) }
              value={ v.key }
              size='small'
              sx={ { flexGrow: 1 } } />
            <TextField 
              onChange={ (e) => setValues(values.map((v, j) => i == j ? { key: v.key, value: e.target.value } : v)) }
              value={ v.value }
              size='small'
              sx={ { flexGrow: 1 } } />
            <IconButton onClick={ () => setValues(values.filter((v, j) => j !== i)) }>
              <RemoveCircleOutline />
            </IconButton>
          </Stack>) 
      }
      <Stack 
        direction='row' 
        alignItems='center' 
        spacing={ 2 }
        sx={ { my: 2 } }>
        <TextField 
          placeholder='Key'
          value={ currentValue?.key || '' }
          size='small'
          onChange={ (e) => setCurrentValue({ ...currentValue, key: e.target.value }) }
          sx={ { flexGrow: 1 } } />
        <TextField 
          placeholder='Value'
          value={ currentValue?.value || '' }
          size='small'
          onChange={ (e) => setCurrentValue({ ...currentValue, value: e.target.value }) }
          sx={ { flexGrow: 1 } } />
        <IconButton onClick={ () => {
          if (currentValue?.key && currentValue.value) setValues([ ...values, (currentValue as { key: string, value: string }) ]) 
          setCurrentValue({})
        } }>
          <AddCircleOutline />
        </IconButton>
      </Stack>
      <Stack direction='row' alignItems='center' flexWrap='wrap' rowGap={ 2 } sx={ { overflowX: 'hidden', pt: '1px' } }>
        <FilePicker onSelect={ newValues => setValues([...values, ...newValues]) } />
      </Stack>
      <Accordion sx={ { mt: 2, boxShadow: 'none', '::before': { content: 'unset' } } }>
        <AccordionSummary expandIcon={ <ExpandMore /> } sx={ { p: 0, m: 0 } }>
          <Stack>
            <Typography variant='h4'>Need help?</Typography>
            <Typography variant='h5'>Run this command to get the chart's values</Typography>
          </Stack>
        </AccordionSummary>
        <AccordionDetails>
          <Stack direction='row' alignItems='center' justifyContent='space-between' sx={ { background: 'rgba(0, 0, 0, 0.1)', p: 1 } }>
            <Typography variant='code'>helm show values oci://dp.apps.rancher.io/charts/{ artifact.name.split(':')[0] } --version { artifact.version }</Typography>
            <Tooltip title='Copy'>
              <IconButton onClick={ () => navigator.clipboard.writeText(`helm show values oci://dp.apps.rancher.io/charts/${ artifact.name.split(':')[0] } --version ${ artifact.version }`) } size='small'>
                <ContentCopy />
              </IconButton>
            </Tooltip>
          </Stack>
        </AccordionDetails>
      </Accordion>
      <Stack direction='row' justifyContent='space-between' sx={ { mt: 2 } }>
        <Button 
          color='inherit'
          onClick={ onClose }
          sx={ { mt: 1 } }
          disabled={ state === 'updating' }>Cancel</Button>
        {
          state === 'updating' ? 
            <Button 
              type='submit'
              variant='contained'
              color='inherit'
              disabled
              sx={ { mt: 1 } }>Updating...</Button> : 
            <Button 
              type='submit'
              variant='contained'
              sx={ { mt: 1 } }>Update</Button>
        }
      </Stack>
    </Modal>
  )
}
