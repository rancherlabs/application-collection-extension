import { Chip, Card, CardContent, Stack, Skeleton, CardActions, Typography, Button, Tooltip } from '@mui/material'
import { useState } from 'react'
import { HelmListItem, WorkloadStatus } from '../../../clients/helm'
import UninstallDialog from '../../ApplicationDetailsPage/components/UninstallDialog'
import { UpdateOutlined } from '@mui/icons-material'
import UpgradeDialog from '../../ApplicationDetailsPage/components/UpgradeDialog'
import { ArtifactListItemReducedDTO } from '../../../../autogenerated/client/backend'

export type Workload = HelmListItem & {
  portMappings: {
    targetPort: number,
    nodePort: number,
    protocol: string
  }[],
}

export default function WorkloadCard({ workload, updateVersion, updateBranchVersion, onUninstall = () => null, onUpdate = () => null }: 
{ workload?: Workload, updateVersion?: ArtifactListItemReducedDTO | null, updateBranchVersion?: ArtifactListItemReducedDTO | null, onUninstall?: () => any, onUpdate?: (result: HelmListItem) => any }) {
  const [ upgradeDialogOpen, setUpgradeDialogOpen ] = useState<boolean>(false)
  const [ uninstallDialogOpen, setUninstallDialogOpen ] = useState<boolean>(false)
  
  function StatusChip({ status }: { status: WorkloadStatus }) {
    let color: 'default' | 'success' | 'error' | 'primary' | 'secondary' | 'info' | 'warning' = 'default'
    let textColor: string = 'text.primary'
    switch (status) {
      case WorkloadStatus.Running:
        color = 'secondary'
        textColor = 'white'
        break
      case WorkloadStatus.Error:
        color = 'error'
        break
      case WorkloadStatus.Loading:
      default:
    }
  
    return <Chip color={ color } label={ `Status: ${status}` } size='small' sx={ { color: textColor } } />
  }
  
  function WorkloadSkeleton() {
    return (
      <Card variant='outlined'>
        <CardContent sx={ { pb: 1 } }>
          <Stack direction='row' justifyContent='space-between' alignItems='start'>
            <Skeleton width={ 232 } height={ 20 } />
            <Stack direction='row' spacing={ 1 }>
              <Skeleton variant='rectangular' width={ 95 } height={ 24 } />
              <Skeleton variant='rectangular' width={ 65 } height={ 24 } />
            </Stack>
          </Stack>
          <Skeleton width={ 159 } height={ 18 } sx={ { mt: 1 } }/>
          <Skeleton width={ 111 } height={ 18 } />
        </CardContent>
        <CardActions sx={ { justifyContent: 'space-between', px: 2 } }>
          <Skeleton variant='rectangular' width={ 68 } height={ 28 } />
          <Stack direction='row' spacing={ 2 }>
            <Skeleton variant='rectangular' width={ 126 } height={ 28 } />
            <Skeleton variant='rectangular' width={ 65 } height={ 28 } />
          </Stack>
        </CardActions>
      </Card>
    )
  }
  
  if (!workload) return <WorkloadSkeleton />
  
  return (
    <>
      <Card variant='outlined'>
        <CardContent sx={ { pb: 0.5 } }>
          <Stack direction='row' justifyContent='space-between' alignItems='start'>
            <Stack direction='row' alignItems='center'>
              <Typography variant='h3'>{ workload.name }</Typography>
              { updateBranchVersion === undefined ?
                <Skeleton variant='rectangular' width={ 20 } height={ 20 } sx={ { mx: 1, mb: 0.25 } } /> :
                updateBranchVersion &&  <Tooltip title='New branch available!'>
                  <UpdateOutlined color='primary' sx={ { mx: 1, mb: 0.25 } } />
                </Tooltip> 
              }
            </Stack>
            <Stack direction='row' spacing={ 1 }>
              { workload.portMappings.map((portMapping, i) => <Chip 
                key={ `${workload.name}-portMapping-${i}` }
                label={ `${portMapping.nodePort} : ${portMapping.targetPort} / ${portMapping.protocol}` }
                size='small' />) }
              <StatusChip status={ workload.status } />
            </Stack>
          </Stack>
          <Stack direction='row' spacing={ 1 } sx={ { mt: 1 } }>
            <Typography color='text.secondary'>Chart:</Typography>
            <Typography variant='body2'>{ workload.chart }</Typography>
          </Stack>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>App version:</Typography>
            <Typography variant='body2'>{ workload.app_version }</Typography>
          </Stack>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>Namespace:</Typography>
            <Typography variant='body2'>{ workload.namespace }</Typography>
          </Stack>
        </CardContent>
        <CardActions sx={ { justifyContent: 'justify-between', px: 2, pt: 0.5 } }>
          <Stack direction='row' flexGrow={ 1 }>
            {
              updateVersion === undefined ? 
                <Skeleton variant='rectangular' width={ 64 } height={ 28 } /> : 
                updateVersion && <Button
                  size='small'
                  color='primary'
                  onClick={ () => setUpgradeDialogOpen(true) }>
                  Update
                </Button> 
            }
          </Stack>
          <Button 
            disabled={ workload?.status === WorkloadStatus.NotRunning || workload?.status === WorkloadStatus.Loading } 
            size='small' 
            color='error'
            onClick={ () => setUninstallDialogOpen(true) }
            sx={ { alignSelf: 'flex-end' } }>
            Uninstall
          </Button>
        </CardActions>
      </Card>
      { updateVersion && <UpgradeDialog 
        artifact={ updateVersion }
        workload={ workload }
        isOpen={ upgradeDialogOpen }
        onSubmit={ (result) => onUpdate(result) }
        onDismiss={ () => setUpgradeDialogOpen(false) } /> }
      <UninstallDialog 
        name={ workload.name }
        namespace={ workload.namespace }
        isOpen={ uninstallDialogOpen }
        onSubmit={ onUninstall }
        onDismiss={ () => setUninstallDialogOpen(false) } />
    </>
  )
}