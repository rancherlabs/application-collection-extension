import { Card, CardContent, Stack, Skeleton, Typography, Tooltip, CardActionArea } from '@mui/material'
import { HelmListItem } from '../../../clients/helm'
import { ChangeCircleOutlined, HomeOutlined, LanOutlined } from '@mui/icons-material'
import { ArtifactListItemReducedDTO } from '../../../../autogenerated/client/backend'
import { Link } from 'react-router-dom'
import StatusIcon from './StatusIcon'

export type Workload = HelmListItem & {
  portMappings: {
    targetPort: number,
    nodePort: number,
    protocol: string
  }[],
}

export default function WorkloadCard({ workload, updateVersion, updateBranchVersion }: 
{ workload: Workload, updateVersion?: ArtifactListItemReducedDTO | null, updateBranchVersion?: ArtifactListItemReducedDTO | null }) {
  
  return (
    <Card
      variant='outlined'
      sx={ { 
        maxWidth: 'lg', 
        '&:hover': { borderColor: 'primary.main', boxShadow: 2 } } }>
      <CardActionArea 
        component={ Link }
        to={ `/workloads/${workload.name}` }>
        <CardContent sx={ { p: 3 } }>
          <Stack direction='row' justifyContent='space-between' alignItems='start'>
            <Stack direction='row' alignItems='center'>
              <Typography variant='h4'>{ workload.name }</Typography>
            </Stack>
            <Stack direction='row' spacing={ 1 }>
              { (updateVersion || updateBranchVersion) && 
                <Tooltip title='Update available'>
                  <ChangeCircleOutlined color='primary' />
                </Tooltip>
              }
              <StatusIcon status={ workload.status } />
            </Stack>
          </Stack>
          <Stack
            direction='row'
            spacing={ 2 }
            sx={ { mt: 1 } }>
            <Tooltip title='Namespace'>
              <Stack 
                direction='row'
                spacing={ 0.75 }
                alignItems='center'>
                <HomeOutlined 
                  fontSize='small' />
                <Typography 
                  color='text.secondary'>
                  { workload.namespace }
                </Typography>
              </Stack>
            </Tooltip>
            { 
              workload.portMappings.map((portMapping, i) => 
                <Tooltip 
                  key={ `${workload.name}-portMapping-${i}` }
                  title='Port mapping'>
                  <Stack 
                    direction='row'
                    spacing={ 0.75 }
                    alignItems='center'>
                    <LanOutlined fontSize='small' />
                    <Typography 
                      color='text.secondary'>
                      { portMapping.nodePort } : { portMapping.targetPort.toString().toUpperCase() } ({ portMapping.protocol })
                    </Typography>
                  </Stack>
                </Tooltip>
              ) 
            }
          </Stack>
        </CardContent>
      </CardActionArea>
    </Card>
  )
}

export function LoadingWorkloadCard({}) {
  return (
    <Card
      variant='outlined'
      sx={ { 
        maxWidth: 'lg', 
      } }>
      <CardActionArea 
        disabled>
        <CardContent sx={ { p: 3 } }>
          <Stack direction='row' justifyContent='space-between' alignItems='start'>
            <Stack direction='row' alignItems='center'>
              <Skeleton width={ 210 } height={ 24 }  />
            </Stack>
            <Stack direction='row' spacing={ 1 }>
              <Skeleton variant='circular' width={ 21 } height={ 21 } />
            </Stack>
          </Stack>
          <Stack
            direction='row'
            spacing={ 2 }
            sx={ { mt: 1 } }>
            <Tooltip title='Namespace'>
              <Stack 
                direction='row'
                spacing={ 0.75 }
                alignItems='center'>
                <Skeleton width={ 18 } height={ 18 } />
                <Skeleton width={ 44 } height={ 20 } />
              </Stack>
            </Tooltip>
          </Stack>
        </CardContent>
      </CardActionArea>
    </Card>
  )
}
