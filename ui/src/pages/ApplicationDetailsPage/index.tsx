import { Chip, Skeleton, Stack, Typography } from '@mui/material'
import { useAuth } from '../../AuthContext'
import { ApplicationDTO, ApplicationDTOPackagingFormatEnum, ComponentDTO } from '../../../autogenerated/client/backend'
import { useEffect, useState } from 'react'
import { applicationsClient, componentsClient } from '../../clients/backend'
import { useLoaderData } from 'react-router-dom'
import BranchesList from './components/BranchesList'
import { LoadingBranchCard } from './components/BranchesList/BranchCard'

export async function loader({ params }: { params: any }): Promise<string> {
  return params.slugName
}

export default function ApplicationDetailsPage() {
  const [ application, setApplication ] = useState<ApplicationDTO>()
  const [ component, setComponent ] = useState<ComponentDTO>()
  const auth = useAuth()
  const slugName = useLoaderData()

  useEffect(() => {
    if (auth?.auth) {
      applicationsClient(auth?.auth).getApplication(slugName as string)
        .then(response => {
          if (response.status == 200) {
            setApplication(response.data)
          }
        }).catch(e => console.error('Unexpected error fetching application', e))
      componentsClient(auth?.auth).getComponent(slugName as string)
        .then(response => {
          if (response.status == 200) {
            setComponent(response.data)
          }
        }).catch(e => console.error('Unexpected error fetching component', e))
    }
  }, [])

  if (!application || !component) {
    return (
      <>
        <Stack direction='row' spacing={ 2 } alignItems='center'>
          <Skeleton variant='circular' height={ 60 } width={ 60 } />
          <Stack direction='column' alignItems='start'>
            <Skeleton variant='text' height={ 30 } width={ 150 } />
            <Skeleton variant='rounded' height={ 24 } width={ 74 } />
          </Stack>
        </Stack>
        <Skeleton variant='text' height={ 20 } width='100%' sx={ { mt: 2 } } />
        <Skeleton variant='text' height={ 20 } width='100%' />
        <Skeleton variant='text' height={ 20 } width='50%' sx={ { mb: 2 } } />
        <Typography variant='h3'>Manage branches</Typography>
        <Typography variant='h5' sx={ { mb: 3 } }>Run new workloads in your cluster</Typography>
        <Stack spacing={ 2 }>
          <LoadingBranchCard />
          <LoadingBranchCard />
        </Stack>
      </>
    )
  }

  function humanFriendlyPackagingFormat(packagingFormat?: ApplicationDTOPackagingFormatEnum) {
    if (packagingFormat === ApplicationDTOPackagingFormatEnum.HelmChart) return 'Helm chart'
    if (packagingFormat === ApplicationDTOPackagingFormatEnum.Container) return 'Single container'
    return 'Coming soon'
  }

  return (
    <>
      <Stack direction='row' spacing={ 2 } alignItems='center'>
        { application.logo_url && <img src={ `https://apps.rancher.io${application.logo_url}` } alt={ `${application.name} logo` } height={ 60 } width={ 60 } style={ { height: '100%' } } /> }
        <Stack direction='column' alignItems='start'>
          <Typography variant='h2'>{ application.name }</Typography>
          <Chip label={ humanFriendlyPackagingFormat(application.packaging_format) } size='small' color='primary' />
        </Stack>
      </Stack>
      <Typography sx={ { my: 2 } }>{ application.description }</Typography>
      <Typography variant='h3'>Manage branches</Typography>
      <Typography variant='h5' sx={ { mb: 3 } }>Run new workloads in your cluster</Typography>
      <BranchesList branches={ component.branches } packagingFormat={ application.packaging_format } />
    </>
  )
}