import { createDockerDesktopClient } from '@docker/extension-api-client'
import { ApplicationDTOPackagingFormatEnum, ArtifactListItemReducedDTO, BranchDTO, VersionDTO } from '../../../../autogenerated/client/backend'
import { Box, CircularProgress, IconButton, Skeleton, Stack, Table, TableBody, TableCell, TableHead, TableRow, Tooltip, Typography } from '@mui/material'
import { PlayCircleOutlined, SettingsOutlined, UpdateOutlined, WarningAmberOutlined } from '@mui/icons-material'
import { useEffect, useState } from 'react'
import { findHelmChart, HelmListItem, upgradeHelmChart, WorkloadStatus } from '../../../clients/helm'
import { compareVersions, sortArtifacts } from '../../../clients/util'
import moment from 'moment'
import InstallDialog from '../../../components/Helm/InstallDialog'
import { checkKubernetes } from '../../../clients/kubectl'
import { enqueueSnackbar } from 'notistack'
import { checkDocker } from '../../../clients/docker'
import { useNavigate } from 'react-router-dom'

const ddClient = createDockerDesktopClient()

export default function BranchesTable({ branches, packagingFormat }: { branches: BranchDTO[], packagingFormat?: ApplicationDTOPackagingFormatEnum }) {
  if (!packagingFormat) {
    return <Typography>This application cannot be deployed yet</Typography>
  }

  useEffect(() => {
    switch(packagingFormat) {
      case 'HELM_CHART':
        checkKubernetes(ddClient)
          .catch(e => {
            console.error(e)
            enqueueSnackbar('Error with kubernetes, make sure the cluster is up and reachable')
          })
        break
      case 'CONTAINER':
        checkDocker(ddClient)
          .catch(e => {
            console.error(e)
            enqueueSnackbar('Error with docker engine, make sure it is running')
          })
        break
    }
  }, [])

  return (
    <Table size='small'>
      <TableHead>
        <TableRow>
          <TableCell align='left'>Version</TableCell>
          <TableCell>Revision</TableCell>
          <TableCell>App Version</TableCell>
          <TableCell>Registered</TableCell>
          <TableCell>Digest</TableCell>
          <TableCell>Actions</TableCell>
        </TableRow>
      </TableHead>
      <TableBody>
        {
          branches
            .filter(branch => branch.versions && branch.versions.length > 0 && branch.versions.find(v => v.artifacts.find(a => a.packaging_format === packagingFormat)))
            .flatMap(branch => {
              const version = (branch.versions as VersionDTO[]).find(v => v.artifacts.sort(sortArtifacts).find(a => a.packaging_format === packagingFormat)) as VersionDTO
              return {
                branch: { name: branch.branch_name, pattern: branch.branch_pattern },
                version: version.version_number,
                artifact: version.artifacts.reverse().find(a => a.packaging_format === packagingFormat)
              }
            })
            .filter(({ artifact }) => artifact !== undefined)
            .map(({ branch, version, artifact }) => artifact && 
              <BranchRow 
                key={ artifact?.name } 
                branch={ branch } 
                version={ version } 
                artifact={ artifact } />
            )
        }
      </TableBody>
    </Table>
  )
}

function BranchRow({ branch, version, artifact }: { branch: { name: string, pattern: string }, version: string, artifact: ArtifactListItemReducedDTO }) {
  const [ runningInstance, setRunningInstance ] = useState<HelmListItem | undefined>()
  const [ status, setStatus ] = useState<WorkloadStatus>()
  const [ error, setError ] = useState<string | undefined>()
  const [ installDialogOpen, setInstallDialogOpen ] = useState<boolean>(false)
  
  const navigate = useNavigate()

  useEffect(() => {
    switch (artifact.packaging_format) {
      case 'HELM_CHART':
        findHelmChart(ddClient, artifact.name.split(':')[0], new RegExp(branch.pattern))
          .then(release => {
            if (release) {
              setRunningInstance(release)
              setStatus(release.status)
            } else {
              setStatus(WorkloadStatus.NotRunning)
            }
          })
          .catch(e => {
            setStatus(WorkloadStatus.Error)
            setError(error)
          })
        break
      case 'CONTAINER':
      case 'RPM':
      default:
    }
  }, [])

  function upgrade() {
    setStatus(WorkloadStatus.Loading)
    switch (artifact.packaging_format) {
      case 'HELM_CHART':
        if (runningInstance) {
          upgradeHelmChart(ddClient, artifact, runningInstance)
            .then(result => {
              setRunningInstance(result)
              setStatus(result.status)
            })
            .catch(e => {
              setStatus(WorkloadStatus.Error)
              setError(e)
            })
        }
      case 'RPM':
      case 'CONTAINER':
    }
  }

  return (
    <>
      <TableRow>
        <TableCell>{ artifact?.version }</TableCell>
        <TableCell>{ artifact?.revision }</TableCell>
        <TableCell>{ version }</TableCell>
        <TableCell>{ moment(artifact.registered_at).fromNow() }</TableCell>
        <TableCell>{ artifact?.digest.value.substring(0, 7) }</TableCell>
        <TableCell>
          { 
            status ? 
              <Stack direction='row' alignItems='center' spacing={ 1 }>
                { status === WorkloadStatus.NotRunning && 
                <Tooltip title='Run'>
                  <IconButton onClick={ () => setInstallDialogOpen(true) } sx={ { p: 0 } }><PlayCircleOutlined /></IconButton>
                </Tooltip>
                }
                { status === WorkloadStatus.Running && 
                <Tooltip title='Manage'>
                  <IconButton onClick={ () => navigate('/workloads') } sx={ { p: 0 } }><SettingsOutlined /></IconButton>
                </Tooltip> 
                }
                { status === WorkloadStatus.Running && runningInstance && compareVersions(artifact.version as string, runningInstance.version as string) != 0 &&
                <Tooltip title='Update'>
                  <IconButton onClick={ () => upgrade() } sx={ { p: 0 } }><UpdateOutlined /></IconButton>
                </Tooltip> 
                }
                {
                  status === WorkloadStatus.Error &&
                <Tooltip title={ error }>
                  <WarningAmberOutlined />
                </Tooltip>
                }
                {
                  status === WorkloadStatus.Loading &&
                <Box display='flex' alignItems='center'>
                  <CircularProgress size={ 21 }/>
                </Box>
                }
              </Stack>
              : 
              <Skeleton variant='text' width={ 50 } height={ 21 } />
          }
        </TableCell>
      </TableRow>
      { status === WorkloadStatus.NotRunning &&
        <InstallDialog 
          branch={ branch.name }
          artifact={ artifact }
          version={ version }
          open={ installDialogOpen }
          onSubmit={ (result) => {
            setRunningInstance(result)
            setStatus(result.status)
            setInstallDialogOpen(false)
            navigate('/workloads')
          } }
          onDismiss={ () => setInstallDialogOpen(false) }/> }
    </>
  )
}