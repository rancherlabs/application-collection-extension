import { Accordion, AccordionDetails, AccordionSummary, Button, Card, IconButton, Modal, Skeleton, Stack, TextField, Tooltip, Typography } from '@mui/material'
import { ChangeEvent, useEffect, useRef, useState } from 'react'
import { HelmListItem, upgradeHelmChart } from '../../../clients/helm'
import { createDockerDesktopClient } from '@docker/extension-api-client'
import { AddCircleOutline, ContentCopy, ExpandMore, RemoveCircleOutline } from '@mui/icons-material'
import { parse } from 'yaml'
import { ArtifactListItemReducedDTO } from '../../../../autogenerated/client/backend'

const ddClient = createDockerDesktopClient()

export default function UpgradeDialog({ artifact, workload, isOpen, onSubmit = () => null, onError = () => null, onDismiss = () => null }: 
{ artifact: ArtifactListItemReducedDTO, workload: HelmListItem, isOpen: boolean, onSubmit?: (result: HelmListItem) => any, onError?: (e: any) => any, onDismiss?: () => any }) {
  const [ open, setOpen ] = useState<boolean>(isOpen)
  const [ values, setValues ] = useState<{ key: string, value: string }[]>([])
  const [ currentValue, setCurrentValue ] = useState<{ key?: string, value?: string }>()
  const [ error, setError ] = useState<string>()
  const [ state, setState ] = useState<'loading-local-values' | 'ready' | 'updating'>()

  useEffect(() => {
    if (isOpen) {
      setOpen(isOpen)

      if (!state) {
        setState('loading-local-values')
        ddClient.extension.vm?.service?.get(`/charts/${artifact.name.split(':')[0]}/${artifact.version}/local-values`)
          .then(result => {
            const localValues: { key: string, value: string }[] = (result as any).values
            if (localValues.length > 0) {
              setValues(localValues)
            } else {
              setValues([ { key: 'global.imagePullSecrets[0].name', value: 'application-collection' } ])
            }
          })
          .catch(err => console.error('Unexpected error fetching chart local deployment values', err))
          .finally(() => setState('ready'))
      }
    }
  }, [isOpen])

  function close() {
    setOpen(false) 
    onDismiss()
  }

  function loadValuesFile(file?: File, error?: string) {
    if (file) {
      const reader = new FileReader()

      reader.onload = function(event: ProgressEvent<FileReader>) {
        if (event && event.target) {
          const yaml = parse(event.target.result as string)
          const flattened: { [key: string]: string } = flatten(yaml)
          setValues([...values, ...Object.keys(flattened).map(k => { return { key: k, value: flattened[k] } })])
        }
      }
    
      reader.readAsText(file)
    } else if (error) {
      setError(error)
    } else {
      
    }
  }

  function flatten(data: any) {
    let result: any = {}

    function recurse(cur: any, prop: any) {
      if (Object(cur) !== cur) {
        result[prop] = cur
      } else if (Array.isArray(cur)) {

        for(let i = 0, l = cur.length; i < l; i++) {
          recurse(cur[i], prop + '[' + i + ']')
          if (l == 0) result[prop] = []
        }

      } else {
        let isEmpty = true

        for (let p in cur) {
          isEmpty = false
          recurse(cur[p], prop ? prop+'.'+p : p)
        }

        if (isEmpty && prop) result[prop] = {}
      }
    }

    recurse(data, '')

    return result
  }

  function upgrade() {
    setState('updating')
    upgradeHelmChart(ddClient, artifact, workload, values)
      .then(result => {
        onSubmit(result)
        setState('ready')
        close()
      })
      .catch(e => onError(e))
  }

  function LoadingForm() {
    return (
      <>
        <Skeleton height='244px' variant='rectangular' sx={ { mt: 2 } } />
        <Skeleton height='28px' width='300px' variant='rectangular' sx={ { mt: 2 } } />
        <Skeleton height='68px' variant='rectangular'sx={ { mt: 2 } } />
        <Stack direction='row' alignItems='space-between' sx={ { mt: 2 } }>
          <Skeleton height='33px' width='78px' variant='rectangular' sx={ { mt: 1 } } />
          <Skeleton height='33px' width='78px' variant='rectangular' sx={ { mt: 1 } } />
        </Stack>
      </>
    )
  }

  return (
    <Modal
      open={ open }
      onClose={ close }
      sx={ { '& .MuiBackdrop-root': { background: 'radial-gradient(ellipse, rgba(0,0,0,0.2) 25%, rgba(0,0,0,0) 75%)' } } }>
      <Card
        component='form'
        sx={
          {
            position: 'absolute',
            top: '50%',
            left: '49%',
            transform: 'translate(-50%, -50%)',
            width: '80%',
            maxHeight: '80%',
            overflowY: 'auto',
            p: 3,
          }
        }
        onSubmit={ (e) => {
          e.preventDefault()
          upgrade()
        } }>
        <Typography variant='h3' gutterBottom>Update { workload.name } to { artifact.version }</Typography>
        <Typography variant='h5'>Set Helm Chart values manually or through a YAML file</Typography>
        { state === 'loading-local-values' ? 
          <LoadingForm />
          : 
          <>
            { values.map((v, i) => <Stack key={ `value-${i}` } direction='row' alignItems='center' spacing={ 2 } sx={ { mt: 2 } }>
              <TextField 
                onChange={ (e) => setValues(values.map((v, j) => i == j ? { key: e.target.value, value: v.value } : v)) }
                value={ v.key }
                size='small'
                sx={ { flexGrow: 1 } } />
              <TextField 
                onChange={ (e) => setValues(values.map((v, j) => i == j ? { key: v.key, value: e.target.value } : v)) }
                value={ v.value }
                size='small'
                sx={ { flexGrow: 1 } } />
              <IconButton onClick={ () => setValues(values.filter((v, j) => j !== i)) }>
                <RemoveCircleOutline />
              </IconButton>
            </Stack>) }
            <Stack 
              direction='row' 
              alignItems='center' 
              spacing={ 2 }
              sx={ { my: 2 } }>
              <TextField 
                placeholder='Key'
                value={ currentValue?.key || '' }
                size='small'
                onChange={ (e) => setCurrentValue({ ...currentValue, key: e.target.value }) }
                sx={ { flexGrow: 1 } } />
              <TextField 
                placeholder='Value'
                value={ currentValue?.value || '' }
                size='small'
                onChange={ (e) => setCurrentValue({ ...currentValue, value: e.target.value }) }
                sx={ { flexGrow: 1 } } />
              <IconButton onClick={ () => {
                if (currentValue?.key && currentValue.value) setValues([ ...values, (currentValue as { key: string, value: string }) ]) 
                setCurrentValue({})
              } }>
                <AddCircleOutline />
              </IconButton>
            </Stack>
            <Stack direction='row' alignItems='center' flexWrap='wrap' rowGap={ 2 } sx={ { overflowX: 'hidden', pt: '1px' } }>
              <FilePicker onSelect={ loadValuesFile } />
            </Stack>
            <Accordion sx={ { mt: 2, boxShadow: 'none', '::before': { content: 'unset' } } }>
              <AccordionSummary expandIcon={ <ExpandMore /> } sx={ { p: 0, m: 0 } }>
                <Stack>
                  <Typography variant='h4'>Need help?</Typography>
                  <Typography variant='h5'>Run this command to get the chart's values</Typography>
                </Stack>
              </AccordionSummary>
              <AccordionDetails>
                <Stack direction='row' alignItems='center' justifyContent='space-between' sx={ { background: 'rgba(0, 0, 0, 0.1)', p: 1 } }>
                  <Typography variant='code'>helm show values oci://dp.apps.rancher.io/charts/{ artifact.name.split(':')[0] } --version { artifact.version }</Typography>
                  <Tooltip title='Copy'>
                    <IconButton onClick={ () => navigator.clipboard.writeText(`helm show values oci://dp.apps.rancher.io/charts/${ artifact.name.split(':')[0] } --version ${ artifact.version }`) } size='small'>
                      <ContentCopy />
                    </IconButton>
                  </Tooltip>
                </Stack>
              </AccordionDetails>
            </Accordion>
            <Stack direction='row' justifyContent='space-between' sx={ { mt: 2 } }>
              <Button 
                color='inherit'
                onClick={ close }
                sx={ { mt: 1 } }
                disabled={ state === 'updating' }>Cancel</Button>
              {
                state === 'updating' ? 
                  <Button 
                    type='submit'
                    variant='contained'
                    color='inherit'
                    disabled
                    sx={ { mt: 1 } }>Updating...</Button> : 
                  <Button 
                    type='submit'
                    variant='contained'
                    sx={ { mt: 1 } }>Update</Button>
              }
            </Stack>
          </>
        }
      </Card>
    </Modal>
  )
}

function FilePicker({ onSelect = () => null }: { onSelect?: (file?: File, error?: string) => any }) {
  const fileInputRef = useRef<any>(null)
  const [ helperText, setHelperText ] = useState('No file selected')

  useEffect(() => {
    if (fileInputRef.current && fileInputRef.current.value) {
      const file = fileInputRef.current.value
      setHelperText(file.replace('C:\\fakepath\\', ''))
    }
  }, [])

  function onFileChange(e: ChangeEvent<HTMLInputElement>) {
    if (e.target.files && e.target.files?.length > 0) {
      const file = e.target.files[0]
      setHelperText(file.name)

      if (file.type === 'application/x-yaml' || file.type === 'text/yaml') {
        onSelect(file)
      } else {
        onSelect(undefined, 'Selected file is not a YAML')
      }
    }
  }

  return (
    <Stack direction='row' alignItems='center' gap={ 2 }>
      <input type='file' accept='application/x-yaml' name='values' ref={ fileInputRef } onChange={ onFileChange } hidden />
      <Button variant='outlined' size='small' onClick={ () => fileInputRef && fileInputRef.current.click() } sx={ { minWidth: 'fit-content' } }>Upload values YAML</Button>
      <Typography variant='body2' sx={ { whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden', width: { xs: '100%', md: '300px' } } }>{ helperText }</Typography>
    </Stack>
  )
}
