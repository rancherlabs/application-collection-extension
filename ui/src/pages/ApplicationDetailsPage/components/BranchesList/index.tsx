import { Stack, Typography } from '@mui/material'
import { ApplicationDTOPackagingFormatEnum, BranchDTO } from '../../../../../autogenerated/client/backend'
import { sortArtifacts } from '../../../../clients/util'
import BranchCard from './BranchCard'


export default function BranchesList({ branches, packagingFormat, disabled = false }: { branches: BranchDTO[], packagingFormat?: ApplicationDTOPackagingFormatEnum, disabled?: boolean }) {
  if (!packagingFormat) {
    return <Typography>This application cannot be deployed yet</Typography>
  }
  
  return (
    <Stack spacing={ 2 }>
      {
        branches
          .filter(branch => branch.versions?.find(v => v.artifacts.find(a => a.packaging_format === packagingFormat)))
          .flatMap(branch => {
            const version = branch.versions?.find(v => v.artifacts.sort(sortArtifacts).find(a => a.packaging_format === packagingFormat))
            return {
              branch: { name: branch.branch_name, pattern: branch.branch_pattern },
              version: version?.version_number,
              artifact: version?.artifacts.reverse().find(a => a.packaging_format === packagingFormat)
            }
          })
          .filter(({ artifact }) => artifact !== undefined)
          .map(({ branch, version, artifact }) => artifact && 
            <BranchCard 
              key={ artifact?.name } 
              branch={ branch } 
              version={ version as string } 
              artifact={ artifact }
              disabled={ disabled } />
          )
      }
    </Stack>
  )
}
