import { Accordion, AccordionDetails, AccordionSummary, Box, Button, IconButton, Skeleton, Stack, TextField, Tooltip, Typography } from '@mui/material'
import { ChangeEvent, useEffect, useRef, useState } from 'react'
import { ArtifactDTO, ArtifactListItemReducedDTO } from '../../../../autogenerated/client/backend'
import { HelmListItem, installHelmChart } from '../../../clients/helm'
import { createDockerDesktopClient } from '@docker/extension-api-client'
import { AddCircleOutline, ContentCopy, ExpandMore, RemoveCircleOutline } from '@mui/icons-material'
import { parse } from 'yaml'
import Modal from '../../../components/Modal'

const ddClient = createDockerDesktopClient()

export default function InstallDialog({ branch, artifact, version, isOpen, onSubmit = () => null, onDismiss = () => null }: 
{ branch: string, artifact: ArtifactListItemReducedDTO | ArtifactDTO, version: string, isOpen: boolean, onSubmit?: (result: HelmListItem) => any, onDismiss?: () => any }) {
  const [ open, setOpen ] = useState<boolean>(isOpen)
  const [ values, setValues ] = useState<{ key: string, value: string }[]>([])
  const [ currentValue, setCurrentValue ] = useState<{ key?: string, value?: string }>()
  const [ error, setError ] = useState<string>()
  const [ result, setResult ] = useState<HelmListItem>()
  const [ state, setState ] = useState<'ready' | 'loading-local-values' | 'installing' | 'installation-completed' | 'error'>()

  useEffect(() => {
    if (isOpen) {
      setOpen(isOpen)

      if (!state) {
        setState('loading-local-values')
        ddClient.extension.vm?.service?.get(`/charts/${artifact.name.split(':')[0]}/${artifact.version}/local-values`)
          .then(result => {
            const localValues: { key: string, value: string }[] = (result as any).values
            if (localValues.length > 0) {
              setValues(localValues)
            } else {
              setValues([ { key: 'global.imagePullSecrets[0].name', value: 'application-collection' } ])
            }
          })
          .catch(err => console.error('Unexpected error fetching chart local deployment values', err))
          .finally(() => setState('ready'))
      }
    }
  }, [isOpen])

  function close() {
    setOpen(false) 
    onDismiss()
  }

  function install() {
    setState('installing')
    installHelmChart(ddClient, branch, artifact, version, values)
      .then(result => {
        setResult(result)
        setState('installation-completed')
      })
      .catch(e => {
        setState('error')
        setError(e)
      })
  }

  function LoadingForm() {
    return (
      <>
        <Skeleton height='244px' variant='rectangular' sx={ { mt: 2 } } />
        <Skeleton height='28px' width='300px' variant='rectangular' sx={ { mt: 2 } } />
        <Skeleton height='68px' variant='rectangular'sx={ { mt: 2 } } />
        <Stack direction='row' alignItems='space-between' sx={ { mt: 2 } }>
          <Skeleton height='33px' width='78px' variant='rectangular' sx={ { mt: 1 } } />
          <Skeleton height='33px' width='78px' variant='rectangular' sx={ { mt: 1 } } />
        </Stack>
      </>
    )
  }

  if (error) {
    return (
      <Modal
        title='Error'
        subtitle='There was an unexpected error installing the application'
        open={ open }
        onClose={ close }>
        <Box sx={ { p: 2, background: 'rgba(125, 125, 125, 0.1)' } }>
          { 
            error.split('\n')
              .filter(line => line)
              .map((line, i) => <Typography key={ `error-line-${i}` } variant='code' component='p'>&gt; { line }</Typography>) 
          }
        </Box>
        <Stack direction='row' justifyContent='space-between' sx={ { mt: 2 } }>
          <Button 
            color='inherit'
            onClick={ () => setError(undefined) }
            sx={ { mt: 1 } }>Go back</Button>
          <Button 
            color='error'
            onClick={ () => {
              setError(undefined)
              close()
            } }
            sx={ { mt: 1 } }>Cancel installation</Button>
        </Stack>
      </Modal>
    )
  }

  if (state === 'loading-local-values') {
    return (
      <Modal
        title='Configure installation'
        subtitle='Set Helm Chart values manually or through a YAML file'
        open={ open }
        onClose={ close }>
        <LoadingForm />
      </Modal>
    )
  }

  if (state === 'installation-completed' && result) {
    if (result.notes) {
      return (
        <Modal
          title='Installation completed'
          subtitle='The application was successfully deployed'
          open={ open }
          onClose={ () => onSubmit(result) }>
          <Typography variant='body1' sx={ { my: 2 } }>These are the application <Typography variant='code'>NOTES.txt</Typography>, read them carefully before closing this modal.</Typography>
          <Box sx={ { p: 2, background: 'rgba(125, 125, 125, 0.1)' } }>
            { 
              result.notes.split('\n')
                .filter(line => line)
                .map((line, i) => <Typography key={ `notes-line-${i}` } variant='code' component='p'>{ line }</Typography>) 
            }
          </Box>
          <Stack direction='row' justifyContent='end' sx={ { mt: 2 } }>
            <Button 
              color='inherit'
              onClick={ () => onSubmit(result) }
              sx={ { mt: 1 } }>Close</Button>
          </Stack>
        </Modal>
      )
    } else {
      onSubmit(result)
    }
  }

  return (
    <Modal
      title='Configure installation'
      subtitle='Set Helm Chart values manually or through a YAML file'
      open={ open }
      onClose={ close }
      onSubmit={ install }>
      { 
        values.map((v, i) => 
          <Stack key={ `value-${i}` } direction='row' alignItems='center' spacing={ 2 } sx={ { mt: 2 } }>
            <TextField 
              onChange={ (e) => setValues(values.map((v, j) => i == j ? { key: e.target.value, value: v.value } : v)) }
              value={ v.key }
              size='small'
              sx={ { flexGrow: 1 } } />
            <TextField 
              onChange={ (e) => setValues(values.map((v, j) => i == j ? { key: v.key, value: e.target.value } : v)) }
              value={ v.value }
              size='small'
              sx={ { flexGrow: 1 } } />
            <IconButton onClick={ () => setValues(values.filter((v, j) => j !== i)) }>
              <RemoveCircleOutline />
            </IconButton>
          </Stack>) 
      }
      <Stack 
        direction='row' 
        alignItems='center' 
        spacing={ 2 }
        sx={ { my: 2 } }>
        <TextField 
          placeholder='Key'
          value={ currentValue?.key || '' }
          size='small'
          onChange={ (e) => setCurrentValue({ ...currentValue, key: e.target.value }) }
          sx={ { flexGrow: 1 } } />
        <TextField 
          placeholder='Value'
          value={ currentValue?.value || '' }
          size='small'
          onChange={ (e) => setCurrentValue({ ...currentValue, value: e.target.value }) }
          sx={ { flexGrow: 1 } } />
        <IconButton onClick={ () => {
          if (currentValue?.key && currentValue.value) setValues([ ...values, (currentValue as { key: string, value: string }) ]) 
          setCurrentValue({})
        } }>
          <AddCircleOutline />
        </IconButton>
      </Stack>
      <Stack direction='row' alignItems='center' flexWrap='wrap' rowGap={ 2 } sx={ { overflowX: 'hidden', pt: '1px' } }>
        <FilePicker 
          onSelect={ newValues => setValues([...values, ...newValues]) } />
      </Stack>
      <Accordion sx={ { mt: 2, boxShadow: 'none', '::before': { content: 'unset' } } }>
        <AccordionSummary expandIcon={ <ExpandMore /> } sx={ { p: 0, m: 0 } }>
          <Stack>
            <Typography variant='h4'>Need help?</Typography>
            <Typography variant='h5'>Run this command to get the chart's values</Typography>
          </Stack>
        </AccordionSummary>
        <AccordionDetails>
          <Stack direction='row' alignItems='center' justifyContent='space-between' sx={ { background: 'rgba(0, 0, 0, 0.1)', p: 1 } }>
            <Typography variant='code'>helm show values oci://dp.apps.rancher.io/charts/{ artifact.name.split(':')[0] } --version { artifact.version }</Typography>
            <Tooltip title='Copy'>
              <IconButton onClick={ () => navigator.clipboard.writeText(`helm show values oci://dp.apps.rancher.io/charts/${ artifact.name.split(':')[0] } --version ${ artifact.version }`) } size='small'>
                <ContentCopy />
              </IconButton>
            </Tooltip>
          </Stack>
        </AccordionDetails>
      </Accordion>
      <Stack direction='row' justifyContent='space-between' sx={ { mt: 2 } }>
        <Button 
          color='inherit'
          onClick={ close }
          disabled={ state === 'installing' }>Cancel</Button>
        {
          state === 'installing' ?
            <Button 
              type='submit'
              variant='contained'
              color='inherit'
              disabled>Installing...</Button>
            :
            <Button 
              type='submit'
              variant='contained'>Install</Button>
        }
      </Stack>
    </Modal>
  )
}

function FilePicker({ onSelect = () => null }: { onSelect?: (values: { key: string, value: string }[]) => any }) {
  const fileInputRef = useRef<any>(null)
  const [ helperText, setHelperText ] = useState('No file selected')
  const [ error, setError ] = useState<string>()

  useEffect(() => {
    if (fileInputRef.current && fileInputRef.current.value) {
      const file = fileInputRef.current.value
      setHelperText(file.replace('C:\\fakepath\\', ''))
    }
  }, [])

  function onFileChange(e: ChangeEvent<HTMLInputElement>) {
    if (e.target.files && e.target.files?.length > 0) {
      const file = e.target.files[0]
      setHelperText(file.name)

      if (file.type === 'application/x-yaml' || file.type === 'text/yaml') {
        const reader = new FileReader()
  
        reader.onload = function(event: ProgressEvent<FileReader>) {
          if (event && event.target) {
            const yaml = parse(event.target.result as string)
            const flattened: { [key: string]: string } = flatten(yaml)
            onSelect(Object.keys(flattened).map(k => { return { key: k, value: flattened[k] } }))
            setError(undefined)
          }
        }

        reader.onerror = function() {
          setError('Invalid values file')
        }
      
        reader.readAsText(file)
      } else {
        setError('Selected file is not a YAML')
      }
    }
  }

  function flatten(data: any) {
    let result: any = {}

    function recurse(cur: any, prop: any) {
      if (Object(cur) !== cur) {
        result[prop] = cur
      } else if (Array.isArray(cur)) {

        for(let i = 0, l = cur.length; i < l; i++) {
          recurse(cur[i], prop + '[' + i + ']')
          if (l == 0) result[prop] = []
        }

      } else {
        let isEmpty = true

        for (let p in cur) {
          isEmpty = false
          recurse(cur[p], prop ? prop+'.'+p : p)
        }

        if (isEmpty && prop) result[prop] = {}
      }
    }

    recurse(data, '')

    return result
  }

  return (
    <Stack direction='row' alignItems='center' gap={ 2 }>
      <input type='file' accept='application/x-yaml' name='values' ref={ fileInputRef } onChange={ onFileChange } hidden />
      <Button variant='outlined' size='small' onClick={ () => fileInputRef && fileInputRef.current.click() } sx={ { minWidth: 'fit-content' } }>Upload values YAML</Button>
      <Typography 
        variant='body2' 
        color={ error ? 'error' : 'text.primary' }
        sx={ { 
          whiteSpace: 'nowrap', 
          textOverflow: 'ellipsis', 
          overflow: 'hidden', 
          width: { xs: '100%', md: '300px' } } 
        }>
        { error ? error : helperText }
      </Typography>
    </Stack>
  )
}
