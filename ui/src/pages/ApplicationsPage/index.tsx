import { Stack, Typography } from '@mui/material'
import { ReactElement, useEffect, useState } from 'react'
import { ApplicationDTOPackagingFormatEnum, ApplicationReducedViewDTO } from '../../../autogenerated/client/backend'
import { applicationsClient } from '../../clients/backend'
import ApplicationCard, { ApplicationCardSkeleton } from './components/ApplicationCard'
import { useAuth } from '../../AuthContext'
import { InfiniteScroll } from './components/InfiniteScroll'
import { AxiosError } from 'axios'
import { Link } from 'react-router-dom'

export default function ApplicationsPage() {
  const [ applications, setApplications ] = useState<ApplicationReducedViewDTO[]>([])
  const [ nextPage, setNextPage ] = useState(1)
  const [ totalSize, setTotalSize ] = useState(0)
  const [ error, setError ] = useState<ReactElement>()

  const auth = useAuth()

  useEffect(() => {
    if (auth) {
      applicationsClient(auth).getApplications(undefined, undefined, ApplicationDTOPackagingFormatEnum.HelmChart)
        .then(response => {
          if (response.status == 200) {
            setApplications(response.data.items)
            setNextPage(response.data.page === response.data.total_pages ? response.data.page || 0 : nextPage + 1)
            setTotalSize(response.data.total_size || 0)
          }
        })
        .catch(e => {
          console.error('Unexpected error fetching applications', e)
          let content
          if (e instanceof AxiosError && e.status == 401) {
            content = <>Authentication failed. Go to the <Link to='/settings'>Settings page</Link> to manage the access token.</>
          } else {
            content = 'There was an unexpected error loading the collection. Try again in a couple of minutes.'
          }
          setError(<Typography color='error' sx={ { mt: 2 } }>{ content }</Typography>)
        })
    }
  }, [auth])

  function loadAppsPage() {
    if (auth) {
      applicationsClient(auth).getApplications(undefined, undefined, ApplicationDTOPackagingFormatEnum.HelmChart, undefined, nextPage)
        .then((response) => {
          setApplications([...applications, ...response.data.items])
          setNextPage(response.data.page === response.data.total_pages ? response.data.page || 0 : nextPage + 1)
        })
        .catch(e => {
          console.error('Unexpected error fetching applications', e)
          let content
          if (e instanceof AxiosError && e.status == 401) {
            content = <>Authentication failed. Go to the <Link to='/settings'>Settings page</Link> to manage the access token.</>
          } else {
            content = 'There was an unexpected error loading the collection. Try again in a couple of minutes.'
          }
          setError(<Typography color='error' sx={ { mt: 2 } }>{ content }</Typography>)
        })
    }
  }

  return (
    <>
      <Typography variant='h2'>Applications</Typography>
      <Typography variant='h5'>Select an application to install</Typography>
      {  
        applications.length > 0 ? 
          <InfiniteScroll
            load={ loadAppsPage } 
            hasMore={ applications.length < totalSize  } 
            loader={ <ApplicationCardSkeleton /> } 
            style={ { width: '100%' } }>
            <Stack rowGap={ 3 } flexGrow={ 1 } sx={ { mt: 2, mb: 3 } }>
              { applications.map(a => <ApplicationCard app={ a } key={ a.slug_name } />) }
            </Stack>
          </InfiniteScroll> :
          <Stack rowGap={ 3 } flexGrow={ 1 } sx={ { mt: 2 } }>
            { Array.apply(null, Array(20)).map((v, i) => <ApplicationCardSkeleton key={ `placeholder-app-${i}` } />) }
          </Stack>
      }
      {
        error
      }
    </>
  )
}