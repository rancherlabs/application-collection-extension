import { createDockerDesktopClient } from '@docker/extension-api-client'
import { Box, Button, Card, Skeleton, Stack, Tooltip, Typography } from '@mui/material'
import { useLoaderData, useNavigate } from 'react-router-dom'
import { findRelease, HelmListItem, HelmReleaseDetails } from '../../clients/helm'
import { ChangeCircleOutlined, Delete, EditOutlined, HomeOutlined, SyncOutlined, Upgrade } from '@mui/icons-material'
import moment from 'moment'
import StatusIcon from '../WorkloadsPage/components/StatusIcon'
import Grid from '@mui/material/Unstable_Grid2'
import { useEffect, useState } from 'react'
import UpgradeDialog from '../ApplicationDetailsPage/components/UpgradeDialog'
import UninstallDialog from '../ApplicationDetailsPage/components/UninstallDialog'
import { ArtifactListItemReducedDTO, ArtifactListItemReducedDTOPackagingFormatEnum, BranchDTO } from '../../../autogenerated/client/backend'
import { useAuth } from '../../AuthContext'
import { componentsClient } from '../../clients/backend'
import { compareVersions } from '../../clients/util'
import HistoryTimeLine from './HistoryTimeLine'

const ddClient = createDockerDesktopClient()

export async function loader({ params }: { params: any }): Promise<HelmReleaseDetails> {
  return await findRelease(ddClient, params.name)
}

export default function WorkloadDetailsPage() {
  const release: HelmReleaseDetails = useLoaderData() as any

  const [ update, setUpdate ] = useState<ArtifactListItemReducedDTO | null>()
  const [ updateDialogOpen, setUpdateDialogOpen ] = useState<boolean>(false)
  const [ deleteDialogOpen, setDeleteDialogOpen ] = useState<boolean>(false)

  const auth = useAuth()
  const navigate = useNavigate()

  useEffect(() => {
    function appSlugName(name: string): string {
      const chunks = name.split('-')
      return chunks.filter((chunk, i) => i < chunks.length - 1).join('-')
    }

    componentsClient(auth?.auth || null).getComponent(appSlugName(release.name))
      .then(response => {
        const component = response.data

        const currentBranch = component.branches.find(branch => release.app_version.match(new RegExp(branch.branch_pattern))) as BranchDTO
        const newVersion = currentBranch.versions?.find(version => compareVersions(version.version_number, release.app_version) > 0 &&
          version.artifacts.find(artifact => artifact.packaging_format === ArtifactListItemReducedDTOPackagingFormatEnum.HelmChart))
          ?.artifacts.find(artifact => artifact.packaging_format === ArtifactListItemReducedDTOPackagingFormatEnum.HelmChart)
        
        if (newVersion) {
          setUpdate(newVersion)
        } else {
          const newBranch = component.branches.find(branch => branch !== currentBranch && 
          branch.versions && 
          branch.versions.length > 0 && 
          branch.versions.find(version => compareVersions(version.version_number, release.app_version) > 0))
          const newBranchVersion = newBranch?.versions?.flatMap(version => version.artifacts)
            .find(artifact => artifact.packaging_format === ArtifactListItemReducedDTOPackagingFormatEnum.HelmChart)
        
          if (newBranchVersion) {
            setUpdate(newBranchVersion)
          } else {
            setUpdate(null)
          }
        }
      })
      .catch((e) => console.error('Unexpected error fetching component data', e))

  }, [release])

  function onUpdate(newRelease: HelmListItem) {

  }

  function onDelete() {
    navigate(-1)
  }

  return <>
    <Stack direction='row' alignItems='start' justifyContent='space-between'>
      <Stack>
        <Stack direction='row' alignItems='center' spacing={ 2 }>
          <Typography variant='h2'>{ release.name }</Typography>
          <StatusIcon status={ release.status } />
          { update && <Tooltip title='Update available'><ChangeCircleOutlined color='primary' /></Tooltip> }
        </Stack>
        <Stack direction='row' spacing={ 2 } sx={ { mt: 1 } }>
          <Tooltip title='Namespace'>
            <Stack direction='row' alignItems='center' spacing={ 0.75 }>
              <HomeOutlined fontSize='small' />
              <Typography color='text.secondary'>{ release.namespace }</Typography>
            </Stack>
          </Tooltip>
          <Tooltip
            title='Last updated'
            PopperProps={ { modifiers: [
              {
                name: 'offset',
                options: { offset: [0, -4] }
              }
            ]
            } }>
            <Stack direction='row' alignItems='center' justifyContent='start' spacing={ 0.5 }>
              <SyncOutlined fontSize='small' sx={ { color: 'text.secondary' } } />
              <Typography color='text.secondary'>{ moment(release.history[release.history.length-1].updated).fromNow() }</Typography>
            </Stack>
          </Tooltip>
        </Stack>
      </Stack>
      <Button variant='outlined' startIcon={ <EditOutlined /> }>Edit</Button>
    </Stack>
    <Grid container spacing={ 2 } sx={ { mt: 2 } }>
      <Grid xs={ 4 }>
        <Card variant='outlined' sx={ { p: 2 } }>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>Chart name: </Typography>
            <Typography>{ release.chart }</Typography>
          </Stack>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>Chart version: </Typography>
            <Typography>{ release.version }</Typography>
          </Stack>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>App version: </Typography>
            <Typography>{ release.app_version }</Typography>
          </Stack>
        </Card>
      </Grid>
      <Grid xs={ 6 }>
        <Card variant='outlined' sx={ { p: 2 } }>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>Last updated: </Typography>
            <Typography>{ moment(release.history[release.history.length - 1].updated).calendar() }</Typography>
          </Stack>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>Namespace: </Typography>
            <Typography>{ release.namespace }</Typography>
          </Stack>
          <Stack direction='row' spacing={ 1 }>
            <Typography color='text.secondary'>Status: </Typography>
            <Typography>{ release.status }</Typography>
          </Stack>
        </Card>
      </Grid>
    </Grid>
    <HistoryTimeLine history={ release.history } />
    <Box
      sx={ {
        mt: 2,
        p: 2, 
        background: 'rgba(125, 125, 125, 0.1)',
        overflow: 'auto'
      } }>
      {
        release.notes ? 
          release.notes.split('\n')
            .filter(line => line)
            .map((line, i) => 
              <Typography key={ `notes-line-${i}` } variant='code' component='p' whiteSpace='nowrap'>{ line }</Typography>) :
          <Typography variant='code' component='p' whiteSpace='nowrap'>This workload does not have a NOTES.txt</Typography>
      }
    </Box>
    <Stack direction='row' justifyContent='space-between' spacing={ 2 } sx={ { mt: 3 } }>
      <Button color='error' variant='text' startIcon={ <Delete /> } onClick={ () => setDeleteDialogOpen(true) }>Delete</Button>
      { update === undefined ?
        <Skeleton variant='rounded' width={ 102 }  height={ 32 } /> : 
        update && <Button color='primary' variant='contained' startIcon={ <Upgrade /> } onClick={ () => setUpdateDialogOpen(true) }>Update</Button> }
    </Stack>
    { update && <UpgradeDialog 
      artifact={ update }
      workload={ release }
      isOpen={ updateDialogOpen }
      onSubmit={ (result) => onUpdate(result) }
      onDismiss={ () => setUpdateDialogOpen(false) } /> }
    <UninstallDialog 
      name={ release.name }
      namespace={ release.namespace }
      isOpen={ deleteDialogOpen }
      onSubmit={ onDelete }
      onDismiss={ () => setDeleteDialogOpen(false) } />
  </>
}
