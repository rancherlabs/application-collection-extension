name: Release

on:
  pull_request:
    branches:
      - main
    types: 
      - closed

jobs:
  release:
    name: Release image and generate GitHub release
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    steps:
      - name: Extract version name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH_NAME#release/}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Login to Application Collection
        uses: docker/login-action@v3
        with:
          registry: dp.apps.rancher.io
          username: ${{ secrets.APPCO_SA_USERNAME }}
          password: ${{ secrets.APPCO_SA_PASSWORD }}

      - name: Fetch Dockerhub credentials
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/dockerhub/credentials username | DOCKER_USERNAME ;
            secret/data/github/repo/${{ github.repository }}/dockerhub/credentials password | DOCKER_PASSWORD

      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        env:
          IMAGE_NAME: rancherlabs/application-collection-extension
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            RELEASE_VERSION=${{ steps.extract_version.outputs.version }}
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.version }}
      
      - name: Tag and push release version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ steps.extract_version.outputs.version }}" -m "Release ${{ steps.extract_version.outputs.version }}"
          git push origin "${{ steps.extract_version.outputs.version }}"

      - name: Create GitHub release notes
        uses: actions/github-script@v7
        with:
          script: |
            await github.request(`POST /repos/${{ github.repository }}/releases`, {
              tag_name: ${{ steps.extract_version.outputs.version }},
              generate_release_notes: true
            });
